services:
  # NIVEAU 1: Services de base (aucune dépendance)
  
  # MongoDB pour le stockage de documents
  mongodb:
    image: mongo:latest
    container_name: legal-analyzer-mongodb
    restart: unless-stopped
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - legal-analyzer-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-password_securise}

  # Redis pour le stockage de contexte
  redis:
    image: redis:alpine
    container_name: legal-analyzer-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --requirepass ${REDIS_PASSWORD:-password_securise}

  # Qdrant pour la base de données vectorielle
  qdrant:
    image: qdrant/qdrant
    container_name: legal-analyzer-qdrant
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 90s

  # NIVEAU 2: Services dépendant des services de base
  
  # API Backend (FastAPI)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: legal-analyzer-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
      - uploaded_documents:/app/uploads
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/legal_analyzer
      - REDIS_URI=redis://redis:6379/0
      - QDRANT_URI=http://qdrant:6333
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LLM_PROVIDER=groq
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mongo Express pour l'interface web MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: legal-analyzer-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_USER:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_PASSWORD:-password_securise}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-password_securise}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGODB_USER:-admin}:${MONGODB_PASSWORD:-password_securise}@mongodb:27017/
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Redis Commander - client web Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: legal-analyzer-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-password_securise}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-password_securise}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # NIVEAU 3: Services dépendant de l'API
  
  # Frontend (Vue.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: legal-analyzer-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NIVEAU 4: Services dépendant du Frontend et de l'API
  
  # Nginx pour servir le frontend et proxy l'API
  nginx:
    image: nginx:alpine
    container_name: legal-analyzer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - legal-analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  legal-analyzer-network:
    driver: bridge

volumes:
  mongodb_data:
    name: legal-analyzer-mongodb-data
  redis_data:
    name: legal-analyzer-redis-data
  qdrant_data:
    name: legal-analyzer-qdrant-data
  uploaded_documents:
    name: legal-analyzer-uploaded-documents